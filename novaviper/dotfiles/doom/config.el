;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/NovaViper/NixConfig/-/blob/main/home/novaviper/dotfiles/doom/config.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;;(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;;(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Import relevant system variables from flake
(load (concat doom-user-dir "system-vars.el"))

(setq global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-use-notify t)

(setq auto-save-default t)
(setq create-lockfiles t)
(setq make-backup-files t)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(+global-word-wrap-mode +1)

(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))

(setq emojify-download-emojis-p t)

(after! epa-file
  (setq epa-file-encrypt-to '("coder.nova99@mailbox.org")
        epa-file-select-keys t))

(setq doom-theme 'doom-dracula)

(setq doom-modeline-enable-word-count t)

(display-time-mode 1)

(unless (string-match-p "^Power N/A" (battery))
  (display-battery-mode 1))

(add-hook! 'writeroom-mode-hook :append #'doom-modeline-mode)

(setq evil-vsplit-window-right t
      evil-split-window-below t)

(advice-add 'evil-window-vsplit :after #'consult-buffer)
(advice-add 'evil-window-split :after #'consult-buffer)

(use-package! centaur-tabs
  :demand
  :init
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 32
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-set-bar 'under
        ; Make underline bar work properly
        x-underline-at-descent-line t)
  :config
  (centaur-tabs-headline-match)
  (centaur-tabs-group-by-projectile-project))

(define-key global-map (kbd "C-c j")
  (lambda () (interactive) (org-capture nil "jj")))

(map! :leader
      :desc "Create Numpydoc"
        "C-n" #'numpydoc-generate)

(define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
(define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)

(map! :leader
      (:prefix ("z" . "zoxide/fzf")
        :desc "zoxide-add"                    "a" #'zoxide-add
        :desc "zoxide-cd"                     "c" #'zoxide-cd
        :desc "zoxide-find-file"              "f" #'zoxide-find-file
        :desc "zoxide-travel"                 "t" #'zoxide-travel
        :desc "zoxide-remove"                 "x" #'zoxide-remove
        :desc "zoxide-add-with-query"         "A" #'zoxide-add-with-query
        :desc "zoxide-cd-with-query"          "C" #'zoxide-cd-with-query
        :desc "zoxide-find-file-with-query"   "F" #'zoxide-find-file-with-query
        :desc "zoxide-travel-with-query"      "T" #'zoxide-travel-with-query
))

(map! :leader
      (:prefix ("j" . "just")
       :desc "Execute just recipe" "e" #'justl-exec-recipe))

(defun ediff-copy-both-to-C ()
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
(defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "'" 'ediff-copy-both-to-C))
(add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)

(after! org
  (setq org-directory "~/Sync/org/"
        org-hide-emphasis-markers t
        org-insert-heading-respect-content nil
        org-pretty-entities t
        org-startup-with-inline-images t
        org-image-actual-width '(300)
))

(add-hook! org-mode (electric-indent-local-mode -1))

; Enable variable-pitch-mode and visual-line mode in Org mode by default.
;(add-hook! org-mode :append
;           #'visual-line-mode
;           #'variable-pitch-mode)

; Configure org-appear
(add-hook! org-mode :append #'org-appear-mode)
(setq org-appear-autolinks t
      org-appear-autosubmarkers t)

; Configure writeroom/Doom zen module
;(after! writeroom
  ; Center the text and increase the widrh of the visual columns
  ;(setq visual-fill-column-center-text t
  ;      visual-fill-column-width '(60)))
;(setq +zen-window-divider-size 4
;      +zen-text-scale 2)

;; Required for faster loading
(require 'org-agenda)
(after! org
  (setq org-agenda-directory (concat org-directory "agenda/")
        org-agenda-files (doom-files-in org-agenda-directory :match "\\.org$")
        ;org-agenda-prefix-format "%b")
        org-todo-keywords
                '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
                  (sequence "STUDY(s)" "|" "FIN(f)")
                  (sequence "TASK(T)")
                  (sequence "MEETING(m)"))
        org-tag-alist
                '((:startgroup)
                  ("TOC" . ?2) ; TOC-org (default 2 levels deep)
                  ("TOC_3" . ?3) ; TOC-org (3 levels deep)
                  ("TOC_4" . ?4) ; TOC-org (3 levels deep)
                  (:endgroup)
                  ("noexport" . ?n)
                  ("@errand" . ?E)
                  ("@home" . ?H)
                  ("@work" . ?W)
                  ("agenda" . ?a)
                  ("planning" . ?p)
                  ("publish" . ?P)
                  ("batch" . ?b)
                  ("note" . ?n)
                  ("idea" . ?i))
))

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook #'org-summary-todo)

(defun org-agenda-auto-refresh-agenda-buffer ()
  "If we're in an agenda file, and there is an agenda buffer, refresh it."
  (when (org-agenda-file-p)
    (when-let ((buffer (get-buffer org-agenda-buffer-name)))
      (with-current-buffer buffer
	(org-agenda-redo-all)))))

(add-hook 'after-revert-hook #'org-agenda-auto-refresh-agenda-buffer)

(defun kiwon/org-agenda-redo-in-other-window ()
  "Call org-agenda-redo function even in the non-agenda buffer."
  (interactive)
  (let ((agenda-window (get-buffer-window org-agenda-buffer-name t)))
    (when agenda-window
      (with-selected-window agenda-window (org-agenda-redo)))))
(run-at-time nil 60 'kiwon/org-agenda-redo-in-other-window)

(defun list-and-switch-to-agenda-file ()
  "Lists all available agenda files and switches to desired one"
  (interactive)
  (setq full-agenda-file-list nil)
  (setq choice (completing-read "Select agenda file:" org-agenda-files nil t))
  (find-file choice))

(map! :leader
      :desc "Switch to specific org agenda file"
      "o a s" 'list-and-switch-to-agenda-file)

(defun org-agenda-open-hook ()
  (writeroom-mode 1)
  ;(text-scale-set 0)
  ;(visual-fill-column-adjust)
  )

(add-hook 'org-agenda-mode-hook 'org-agenda-open-hook)

(setq org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-deadline-is-shown t)

(custom-set-faces!
  '(org-agenda-date :inherit outline-1 :height 1.15)
  '(org-agenda-date-today :inherit diary :height 1.15)
  '(org-agenda-date-weekend :ineherit outline-2 :height  1.15)
  '(org-agenda-date-weekend-today :inherit outline-4 :height 1.15)
  '(org-super-agenda-header :inherit custom-button :weight bold :height 1.05)
  `(link :foreground unspecified :underline nil :background ,(nth 1 (nth 7 doom-themes--colors)))
  '(org-link :foreground unspecified)
)

(setq org-agenda-category-icon-alist
      `(("personal" ,(list (nerd-icons-codicon "nf-cod-person" :height 0.9)) nil nil :ascent center)
        ("school" ,(list (nerd-icons-mdicon "nf-md-school" :height 0.9)) nil nil :ascent center)
        ("coding" ,(list (nerd-icons-faicon "nf-fa-code_fork" :height 0.9)) nil nil :ascent center)
))

(require 'org-super-agenda)
(org-super-agenda-mode t)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "j" 'org-agenda-next-line)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "k" 'org-agenda-previous-line)

(setq org-super-agenda-groups
      '((:name "Today"
                :time-grid t
                :date today
                :todo "TODAY"
                :scheduled today
                :order 1)
        (:name "Next Items"
               :tag ("NEXT" "outbox"))
        (:name "Important"
               :priority "A")
        (:name "Quick Picks"
               :effort< "0:30")
        (:priority<= "B"
                     :scheduled future
                     :order 2)))

(after! org
  (setq org-roam-directory "~/Sync/org/"
        org-default-notes-file (concat org-directory "refile.org")
))

(advice-add 'org-refile :after 'org-save-all-org-buffers)

(after! org
  (setq org-refile-targets
        '(("archive.org" :maxlevel . 3)
          ("tasks.org" :maxlevel . 1)
          ("exams.org" :maxlevel . 1)
          ("quizzes.org" :maxlevel . 1)
          ("assignments.org" :maxlevel . 1))))

(after! org
  (setq org-capture-templates
        `(("t" "Tasks")
          ("tt" "Task" entry (file+olp ,(concat org-agenda-directory "tasks.org") "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("a" "School Assignments")
          ("aa" "Assignments" entry
           (file ,(concat org-agenda-directory "school/assignments.org"))
           "* TODO %?\n DEADLINE: %T\n"
           :jump-to-captured 1
           :empty-lines 1)
          ("ae" "Exams" entry
           (file ,(concat org-agenda-directory "school/exams.org"))
           "* %? %T\n"
           :jump-to-captured 1
           :empty-lines 1)
          ("aq" "Quizzes" entry
           (file ,(concat org-agenda-directory "school/quizzes.org"))
           "* %? %T\n"
           :jump-to-captured 1
           :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline ,(concat org-agenda-directory "tasks.org") "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))

(use-package! org-wild-notifier
  :after org
  :config
  (setq org-wild-notifier-keyword-whitelist '()
        org-wild-notifier-keyword-blacklist '("DONE")
        org-wild-notifier--alert-severity "medium"
        org-wild-notifier-notification-title "<< ORG AENGDA >>"
        org-wild-notifier-alert-time '(5 10 30 60 120 1440)
        alert-default-style 'libnotify
        alert-libnotify-additional-args'("-h" "string:desktop-entry:emacs"))
  (org-wild-notifier-mode 1))

(setq projectile-project-search-path '(("~/Documents/Projects" . 4)))

(use-package! numpydoc
  :after lsp-mode
  :init
  (setq numpydoc-insertion-style 'prompt))

;; Configure dap mode debuggers
(setq dap-python-debugger 'debugpy)
;(setq lsp-csharp-server-path (executable-find "omnisharp"))
;(setq dap-netcore-install-dir "/usr/bin")

(use-package! dap-mode
  :after lsp-mode
  :init
  (dap-tooltip-mode 1)
  (tooltip-mode 1))
  ;(require 'dap-netcore))

;(add-hook! 'csharp-mode-hook 'dotnet-mode)

(setq lsp-modeline-code-action-fallback-icon "󰌵"
      lsp-progress-prefix "")

(setq lsp-clients-lua-language-server-bin (executable-find "lua-language-server"))

(add-hook! 'magit-mode-hook #'magit-todos-mode)

(setq magit-verbose-messages t)

(setq magit-todos-depth 5)

(setq magit-ediff-dwim-show-on-hunks t)
